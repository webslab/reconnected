---
import '$styles/article.scss'
import BaseLayout from '$layouts/Base.astro'
---

<style is:global>
main {
  min-height: 80svh;
}

img {
  max-width: 100%;
  height: auto;
}

article {
  min-height: 80svh;
}

article figure img,
article p img {
  max-width: 720px;
  border-radius: 0.25rem;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.7);
}

p:has(> img) {
  text-align: center;
}
</style>

<BaseLayout
  auth={true}
  admin={false}
  title="MÃ³dulo"
  description="Module Details">
  <div class="d-flex justify-content-between mb-4">
    <a class="text-decoration-none text-primary" href="/content/modules/">
      <span class="display-6">&larr;</span>
    </a>

    <div class="d-flex gap-3">
      <div class="d-flex flex-column text-center">
        <svg
          class="bi bi-eye text-primary"
          xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" viewBox="0 0 16 16">
          <path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8M1.173 8a13 13 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5s3.879 1.168 5.168 2.457A13 13 0 0 1 14.828 8q-.086.13-.195.288c-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5s-3.879-1.168-5.168-2.457A13 13 0 0 1 1.172 8z"/>
          <path d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5M4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0"/>
        </svg>

        <span
          id="post-visits"
          style="font-size: .75rem;"
          class="badge rounded-pill mt-1 text-bg-primary fw-bold"></span>
      </div>

      <div
        id="post-likes-container"
        class="d-flex flex-column text-center">
        <svg
          style="color: var(--bs-pink);"
          class="bi bi-hand-thumbs-up"
          xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" viewBox="0 0 16 16">
          <path d="M8.864.046C7.908-.193 7.02.53 6.956 1.466c-.072 1.051-.23 2.016-.428 2.59-.125.36-.479 1.013-1.04 1.639-.557.623-1.282 1.178-2.131 1.41C2.685 7.288 2 7.87 2 8.72v4.001c0 .845.682 1.464 1.448 1.545 1.07.114 1.564.415 2.068.723l.048.03c.272.165.578.348.97.484.397.136.861.217 1.466.217h3.5c.937 0 1.599-.477 1.934-1.064a1.86 1.86 0 0 0 .254-.912c0-.152-.023-.312-.077-.464.201-.263.38-.578.488-.901.11-.33.172-.762.004-1.149.069-.13.12-.269.159-.403.077-.27.113-.568.113-.857 0-.288-.036-.585-.113-.856a2 2 0 0 0-.138-.362 1.9 1.9 0 0 0 .234-1.734c-.206-.592-.682-1.1-1.2-1.272-.847-.282-1.803-.276-2.516-.211a10 10 0 0 0-.443.05 9.4 9.4 0 0 0-.062-4.509A1.38 1.38 0 0 0 9.125.111zM11.5 14.721H8c-.51 0-.863-.069-1.14-.164-.281-.097-.506-.228-.776-.393l-.04-.024c-.555-.339-1.198-.731-2.49-.868-.333-.036-.554-.29-.554-.55V8.72c0-.254.226-.543.62-.65 1.095-.3 1.977-.996 2.614-1.708.635-.71 1.064-1.475 1.238-1.978.243-.7.407-1.768.482-2.85.025-.362.36-.594.667-.518l.262.066c.16.04.258.143.288.255a8.34 8.34 0 0 1-.145 4.725.5.5 0 0 0 .595.644l.003-.001.014-.003.058-.014a9 9 0 0 1 1.036-.157c.663-.06 1.457-.054 2.11.164.175.058.45.3.57.65.107.308.087.67-.266 1.022l-.353.353.353.354c.043.043.105.141.154.315.048.167.075.37.075.581 0 .212-.027.414-.075.582-.05.174-.111.272-.154.315l-.353.353.353.354c.047.047.109.177.005.488a2.2 2.2 0 0 1-.505.805l-.353.353.353.354c.006.005.041.05.041.17a.9.9 0 0 1-.121.416c-.165.288-.503.56-1.066.56z"/>
        </svg>

        <span
          id="post-likes"
          style="background-color: var(--bs-pink); font-size: .75rem;"
          class="badge rounded-pill mt-1 fw-bold"></span>
      </div>
    </div>
  </div>

  <div class="text-center mb-3">
    <img
      class="rounded shadow"
      width="960"
      height="540"
      id="post-hero"
      alt="Post Hero"
      src="" />
  </div>

  <h1 id="post-title"></h1>
  <article id="article"></article>

  <div
    class="d-none justify-content-around"
    id="pagination">
    <button
      id="prev"
      class="btn btn-primary">
      Prev
    </button>

    <button
      id="next"
      class="btn btn-primary">
      Next
    </button>
  </div>
</BaseLayout>

<script>
  import type { RecordId } from 'surrealdb'
  import type { Module } from '$lib/types'
  import { authService } from '$lib/auth'

  const postSlug = new URLSearchParams(globalThis.location.search).get('slug')
  const pagination = document.getElementById('pagination')
  const prev = document.getElementById('prev')
  const next = document.getElementById('next')

  if (!postSlug) {
    globalThis.location.href = '/content/modules/'
  }

  authService.isReady.then(async () => {
    const db = authService.getDb()
    const rest: Module[][] = await db.query('SELECT * FROM module WHERE slug IS $slug;', {
      slug: postSlug,
    })

    const post = rest[0][0]

    const pages = rest[0][0].content
    let currentPage = 0

    if (!post) {
      globalThis.location.href = '/content/modules/'
    } else {
      const article = document.getElementById('article')
      const visits = document.getElementById('post-visits')
      const likes = document.getElementById('post-likes')
      const img: HTMLElement = document.getElementById('post-hero')
      const h1 = document.getElementById('post-title')

      visits.innerText = `${post.visits || 0}`
      likes.innerText = `${post.likes || 0}`

      h1.innerText = post.title
      img.src = post.hero

      article.innerHTML = pages[currentPage]
    }

    if (pages.length > 1 && (prev && next)) {
      pagination.classList.remove('d-none')
      pagination.classList.add('d-flex')

      prev.addEventListener('click', () => {
        if (currentPage > 0) {
          currentPage--
          article.innerHTML = pages[currentPage]
        }
      })

      next.addEventListener('click', () => {
        if (currentPage < pages.length - 1) {
          currentPage++
          article.innerHTML = pages[currentPage]
        }
      })
    }
  })

  // send like
  document
    .getElementById('post-likes-container')!
    .addEventListener('click', async () => {
      const db = authService.getDb()
      const user = authService.getUser() || authService.getRandUser()

      try {
        await db.query(
          `
            $user_id = type::record($user);
            RELATE $user_id->likes->(SELECT id FROM ONLY module WHERE slug IS $slug LIMIT 1);
          `,
          { user: user.id, slug: postSlug }, // TODO: getUser() should return anonymous user
        )

        const likes = document.getElementById('post-likes')!
        likes.innerText = `${parseInt(likes.innerText) + 1}`
      } catch (error: unknown) {
        if (error!.toString().includes('unique_likes')) {
          alert('You have already liked this post')
        } else {
          console.log(error)
        }
      }
    })
</script>
