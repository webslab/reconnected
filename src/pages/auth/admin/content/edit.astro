---
import '$styles/editor.scss'
import { WlDatabase } from '@webslab/shared/components/database';

import BaseLayout from '$layouts/Base.astro'

import EditorTemplate from '$components/admin/posts/editor/Template.astro'
import HeroPicker from '$components/admin/posts/HeroPicker.astro'
---

<BaseLayout
  auth={true}
  admin={true}
  title="Post Editor"
  description="Posts Editor for the Blog">

  <div
    id="editor"
    class="d-flex flex-row justify-content-center align-items-center px-3">
    <a
      onclick="window.history.back()"
      class="d-none d-lg-block btn btn-outline-primary pt-0"
      href="#">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-arrow-left" viewBox="0 0 16 16">
        <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8"/>
      </svg>
    </a>

    <h1 class="w-100"><span id="table-name">Post</span> Editor</h1>

    <button id="save" type="submit" class="btn btn-primary">Save</button>
  </div>

  <hr />

  <WlDatabase
    live={false}
    target="section"
    query=""
    client:only="lit">
    <div>
      <section></section>
    </div>

    <EditorTemplate />
    <HeroPicker class="d-none" id="foo" inputId="hero"/>

    <script>
      import { initWlDatabase } from '$lib/utils'

      const postId = new URLSearchParams(window.location.search).get('id')
      const query = `SELECT time::format(publish, '%Y-%m-%d') as publish_fmt, author.name as authorName, * FROM ${postId};`

      initWlDatabase(query)
    </script>
  </WlDatabase>

  <script>
    import { StringRecordId } from 'surrealdb'

    import { joditInit } from '$lib/editor'
    import { authService } from '$lib/auth'
    import { getWlDatabase } from '$lib/utils'

    const postId = new URLSearchParams(window.location.search).get('id')
    let currentPage = 0

    getWlDatabase().then(async (wlDatabase) => {
      import('$lib/hero.ts')

      wlDatabase.addEventListener('wl-task:completed', (evt: CustomEvent) => {
        const db = authService.getDb()

        const add = document.getElementById('add-page')
        const save = document.getElementById('save')
        const hero = document.getElementById('hero') as HTMLInputElement
        const title = document.getElementById('title') as HTMLInputElement
        const author = document.getElementById('author').dataset;
        const publish = document.getElementById('publish') as HTMLInputElement
        const content = document.getElementById('post-content') as HTMLTextAreaElement
        const tableName = document.getElementById('table-name')
        const pagesContainer = document.getElementById('pages-container')

        // hero
        const foo = document.getElementById('foo')
        const heroPicker = document.getElementById('heroPicker')
        const heroPreview = document.getElementById('hero-preview') as HTMLImageElement
        const heroCurrent = heroPicker.dataset.current

        heroPreview.src = heroCurrent
        hero.value = heroCurrent
        heroPicker.appendChild(foo)
        foo.classList.remove('d-none')

        const jodit = joditInit(content)

        const table = evt.detail.result[0][0].id.tb
        const pages = evt.detail.result[0][0].content

        tableName.innerText = table.charAt(0).toUpperCase() + table.slice(1)

        if (table === 'module') {
          pagesList(pages)
          pagesContainer.classList.remove('d-none')
        }

        save.addEventListener('click', savePost)

        add.addEventListener('click', () => {
          const pagesList = document.getElementById('pages-list')
          const item = document.createElement('li')

          item.classList.add('list-group-item')
          item.dataset.index = pages.length
          item.innerHTML = `
            <span class="btn btn-sm btn-outline-secondary">Page: ${pages.length + 1}</span>

            <button
              id="del-page"
              class="btn btn-sm btn-outline-danger mt-0 float-end">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
                <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z"/>
              </svg>
            </button>`

          addItemListener(item, pages.length, pages)
          pagesList.insertBefore(item, add.parentNode)

          // @ts-ignore
          item.firstElementChild.click()
        })

        async function savePost() {
          pages[currentPage] = jodit.currentPlace.editor.innerHTML

          const post = {
            hero: hero.value,
            title: title.value,
            author: new StringRecordId(author.author),
            content: pages,
            publish: new Date(publish.value)
          }

          const res = await db.merge(new StringRecordId(postId), post)
          console.log(res)
        }

        function addItemListener(item: HTMLElement, index: number, pages: string[]) {
          const del = item.querySelector('#del-page')
          const span = item.querySelector('span')

          span.addEventListener('click', async () => {
            const hasChanged = jodit.currentPlace.editor.innerHTML !== pages[currentPage]

            if (!pages[currentPage]) {
              pages[currentPage] = jodit.currentPlace.editor.innerHTML
            }

            if (pages[currentPage] && hasChanged) {
              await savePost()
            }

            jodit.currentPlace.editor.innerHTML = pages[index] || ''
            currentPage = parseInt(item.dataset.index)
          })

          del.addEventListener('click', async (evt) => {
            if (index === 0) {
              alert('you cannot delete the first page')
              return;
            }

            if (index !== currentPage) {
              alert('you cannot delete a page that is not the current page')
              return;
            }

            pages.splice(index, 1)
            const pagesList = document.getElementById('pages-list')

            pagesList.removeChild(item)
            await db.merge(new StringRecordId(postId), { content: pages })

            jodit.currentPlace.editor.innerHTML = pages[--currentPage] || ''

            const prev = pagesList.children[currentPage].firstElementChild as HTMLElement
            setTimeout(() => {
              prev.click()
              prev.classList.add('active')
              setTimeout(() => {
                prev.classList.remove('active')
              }, 400)
            }, 100)
          })
        }

        function pagesList(pages: string[]) {
          const pagesList = document.getElementById('pages-list')
          const items = pagesList.querySelectorAll('li')

          items.forEach((item, index) => {
            if (item.dataset.index) addItemListener(item, index, pages)
          })
        }
      })
    })
  </script>
</BaseLayout>
